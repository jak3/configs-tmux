# ─────────────────────────────────────────────────────────────────────────────┐
#                                                                              │
# File informations:                                                           │
# - Name:    elems/tmux.conf.tt                                                │
# - Summary: The TMux configuration.                                           │
# - Authors:                                                                   │
#   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              │
#   - Giacomo Mantani <name.surname@gmail.com> (jake)                          │
#                                                                              │
# Project informations:                                                        │
#   - Homepage:        https://github.com/alem0lars/configs-tmux               │
#   - Getting started: see README.md in the project root folder                │
#                                                                              │
# License: Apache v2.0 (see below)                                             │
#                                                                              │
# ─────────────────────────────────────────────────────────────────────────────┤
<% define_locals do
  variable :"tmux.copy_cmd", type: :string?, default: nil, as: :copy_cmd
end -%>
# ─────────────────────────────────────────────────────────────────────────────┘

# ┌────────────────────────────────────────────────────────────────────────────┐
# ├→ Variables ────────────────────────────────────────────────────────────────┤

TMUX_VERSION_MAJOR="`tmux -V | cut -d '.' -f 1 | sed 's|[^0-9]||g'`"
TMUX_VERSION_MINOR="`tmux -V | cut -d '.' -f 2 | sed 's|[^0-9]||g'`"
TMUX_VERSION=${TMUX_VERSION_MAJOR}${TMUX_VERSION_MINOR}

<% if local? :copy_cmd %>
TMUX_COPY_CMD="<%= local! :copy_cmd %>"
<% end -%>

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Charset ──────────────────────────────────────────────────────────────────┤

setw -g utf8        on
set  -g status-utf8 on

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ History ──────────────────────────────────────────────────────────────────┤

# Set maximum history size.
set -g history-limit 10240

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Windows ──────────────────────────────────────────────────────────────────┤

# Aggressively resize the chosen window.  This means that tmux will resize the
# window to the size of the smallest session for which it is the current window,
# rather than the smallest session to which it is attached. The window may
# resize when the current window is changed on another sessions; this option is
# good for full-screen programs which support SIGWINCH and poor for interactive
# programs such as shells.
setw -g aggressive-resize on

# Automatic window numbers reordering.
if-shell "[[ $TMUX_VERSION -ge 17 ]]" 'set-option -g renumber-windows on'

# <Prefix><C-s>: Sort windows.
bind-key C-s run \
  "for i in $(tmux lsw|awk -F: '{print $1}'); do tmux movew -s \$i' done"

# Directly expose pane titles.
set -g set-titles on

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Activity ─────────────────────────────────────────────────────────────────┤

# Monitor for activity in the window.
setw -g monitor-activity on

# Windows with activity are highlighted in the status line.
set  -g visual-activity  on

# Urgency hints.
set -g bell-action   any
set -g bell-on-alert on

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Terminal ─────────────────────────────────────────────────────────────────┤

# Set terminal type.
set -g default-terminal "screen-256color"

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Keyboard ─────────────────────────────────────────────────────────────────┤

# Set the time in milliseconds for which tmux waits after an escape is input to
# determine if it is part of a function or meta key sequences.
set -g escape-time 16

# Allow multiple commands to be entered without pressing the prefix-key again in
# the specified time milliseconds.
set -g repeat-time 128

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Mouse (is evil!) ─────────────────────────────────────────────────────────┤

setw -g mode-mouse off
set -g mouse-select-pane off
set -g mouse-resize-pane off
set -g mouse-select-window off

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (general) ────────────────────────────────────────────────────────┤

# Generate xterm-style function key sequences; these have a number included to
# indicate modifiers such as Shift, Alt or Ctrl. The default is off.
setw -g xterm-keys  on

# Enable vi-mode.
set -wg mode-keys   vi
set -g  status-keys vi

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (prefix) ─────────────────────────────────────────────────────────┤

# Change prefix from <C-b> to <C-a>.
set -g prefix C-a
unbind-key C-b
bind-key C-a last-window

# Nested prefix.
bind a   send-prefix

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (reload) ─────────────────────────────────────────────────────────┤

# <Prefix><S-r>: force a reload of the config file.
bind r source ~/.tmux.conf\; display "Tmux config reloaded."

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (history) ────────────────────────────────────────────────────────┤

bind -n C-k clear-history

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (copy & paste) ───────────────────────────────────────────────────┤

# [Normal mode]y or <Enter>: Copy the selected text.
bind -t vi-copy y     copy-pipe $TMUX_COPY_CMD
bind -t vi-copy enter copy-pipe $TMUX_COPY_CMD

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (layout) ─────────────────────────────────────────────────────────┤

# <Prefix><Space>: next layout.
bind 'space' next-layout

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (windows) ────────────────────────────────────────────────────────┤

# <Prefix>c: Create a new window.
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'bind c new-window -c "#{pane_current_path}"' \
  'bind c new-window'

# <Prefix>w: Choose a window.
bind w choose-window

# <Prefix>W: Choose a window from the all of the windows (also in other
#            sessions).
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'bind W choose-tree' \
  'bind W choose-session'

# <Prefix><Alt>w: Kill the window (asking confirmation).
bind M-w confirm kill-window

# <Prefix><Alt>W: Kill the window (without asking confirmation).
bind M-W kill-window

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (sessions) ───────────────────────────────────────────────────────┤

# <Prefix>C: Create a new session.
bind C command-prompt -p "new session:" "new-session -A -s %%"

# <Prefix>d: detach from the current session.
bind d detach

# <Prefix><Alt>s: Kill the session (asking confirmation).
bind M-s confirm kill-session
# <Prefix><Alt>S: Kill the session (without asking confirmation).
bind M-S kill-session

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Hotkeys (panes) ──────────────────────────────────────────────────────────┤

bind J swap-pane -D
bind K swap-pane -U
bind H swap-pane -U
bind L swap-pane -D

bind C-j resize-pane -D 4
bind C-k resize-pane -U 4
bind C-h resize-pane -L 6
bind C-l resize-pane -R 6

# s: Split window horizontally creating a new lower pane.
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'bind s split-window -v -p 33 -c "#{pane_current_path}"' \
  'bind s split-window -v -p 33'

# S: Split window horizontally creating a new upper pane.
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'bind S split-window -v -p 33 -c "#{pane_current_path}"\; swap-pane -U' \
  'bind S split-window -v -p 33\; swap-pane -U'

# v: Split window vertically creating a new right pane.
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'bind v split-window -h -p 33 -c "#{pane_current_path}"' \
  'bind v split-window -h -p 33'

# V: Split window vertically creating a new left pane.
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'bind V split-window -h -p 33 -c "#{pane_current_path}"\; swap-pane -U' \
  'bind V split-window -h -p 33\; swap-pane -U'

# hjkl pane traversal.
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Fallback for weird situations.
bind Up    select-pane -U
bind Down  select-pane -D
bind Left  select-pane -L
bind Right select-pane -R

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Colors ───────────────────────────────────────────────────────────────────┤

set -g status-fg 'colour255'
set -g status-bg 'colour233'
set -g status-justify 'centre'

set -g status-left-length '100'
set -g status-left-attr 'none'
set -g status-right-length '100'
set -g status-right-attr 'none'

setw -g window-status-fg 'colour240'
setw -g window-status-attr 'none'
setw -g window-status-activity-bg 'colour233'
setw -g window-status-activity-attr 'none'
setw -g window-status-activity-fg 'colour25'
if-shell "[[ $TMUX_VERSION_MINOR -ge 7 ]]" \
  'setw -g window-status-separator ""'
setw -g window-status-bg 'colour233'

set -g pane-border-fg 'colour236'
set -g pane-active-border-fg 'colour25'

set -g message-bg 'colour236'
set -g message-command-fg 'colour145'
set -g message-fg 'colour145'
set -g message-command-bg 'colour236'

# ├────────────────────────────────────────────────────────────────────────────┤
# ├→ Status ───────────────────────────────────────────────────────────────────┤

set -g status on

set -g status-left '#[fg=colour108] #h #[fg=colour244]| #[fg=colour75]#S #[fg=colour244]|'
set -g status-right '#[fg=colour244]|#[fg=colour75] #(date +"%b %d %R")'

# vim: set filetype=eruby.tmux :
